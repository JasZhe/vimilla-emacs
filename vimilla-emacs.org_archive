#    -*- mode: org -*-


Archived entries from file /Users/jasonzhen/.emacs.d/vimilla-emacs.org


* eglot booster
:PROPERTIES:
:VISIBILITY: folded
:ARCHIVE_TIME: 2024-02-21 Wed 20:05
:ARCHIVE_FILE: ~/.emacs.d/vimilla-emacs.org
:ARCHIVE_OLPATH: development
:ARCHIVE_CATEGORY: vimilla-emacs
:END:

https://gist.github.com/jdtsmith/d936801a4d7fd981bedf2e59dacd675e
#+begin_src elisp :tangle no
  (use-package eglot :defer t
    :config
    (require 'eglot)
    (require 'jsonrpc)
    (eval-when-compile (require 'cl-lib))

    (defun eglot-booster-plain-command (com)
      "Test if command COM is a plain eglot server command."
      (and (consp com)
           (not (integerp (cadr com)))
           (not (seq-intersection '(:initializationOptions :autoport) com))))

    (defun eglot-booster ()
      "Boost plain eglot server programs with emacs-lsp-booster.
    The emacs-lsp-booster program must be compiled and available on
    variable `exec-path'.  Only local stdin/out based lsp servers can
    be boosted."
      (interactive)
      (unless (executable-find "emacs-lsp-booster")
        (user-error "The emacs-lsp-booster program is not installed"))
      (if (get 'eglot-server-programs 'lsp-booster-p)
          (message "eglot-server-programs already boosted.")
        (let ((cnt 0)
              (orig-read (symbol-function 'jsonrpc--json-read)))
          (dolist (entry eglot-server-programs)
            (cond
             ((functionp (cdr entry))
              (cl-incf cnt)
              (let ((fun (cdr entry)))
                (setcdr entry (lambda (&rest r) ; wrap function
                                (let ((res (apply fun r)))
                                  (if (eglot-booster-plain-command res)
                                      (cons "emacs-lsp-booster" res)
                                    res))))))
             ((eglot-booster-plain-command (cdr entry))
              (cl-incf cnt)
              (setcdr entry (cons "emacs-lsp-booster" (cdr entry))))))
          (defalias 'jsonrpc--json-read
            (lambda ()
              (or (and (= (following-char) ?#)
                       (let ((bytecode (read (current-buffer))))
                         (when (byte-code-function-p bytecode)
                           (funcall bytecode))))
                  (funcall orig-read))))
          (message "Boosted %d eglot-server-programs" cnt))
        (put 'eglot-server-programs 'lsp-booster-p t)))
    ;; need to run it on eglot load
    (eglot-booster))
#+end_src


